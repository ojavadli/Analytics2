# Generated by Django 4.2.7 on 2025-07-22 04:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('influencer', 'Influencer'), ('venue', 'Venue'), ('admin', 'Admin')], default='influencer', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('profile_image', models.ImageField(blank=True, upload_to='profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='InfluencerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instagram_username', models.CharField(max_length=100, unique=True)),
                ('follower_count', models.IntegerField(default=0)),
                ('xp_points', models.IntegerField(default=0)),
                ('tier', models.CharField(choices=[('bronze', 'Bronze Member'), ('silver', 'Silver Member'), ('gold', 'Gold Member'), ('elite', 'Elite SF Member')], default='bronze', max_length=20)),
                ('streak_days', models.IntegerField(default=0)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('total_redemptions', models.IntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('current_balance', models.DecimalField(decimal_places=2, default=1000.0, max_digits=10)),
                ('monthly_allowance', models.DecimalField(decimal_places=2, default=1000.0, max_digits=10)),
                ('last_allowance_reset', models.DateTimeField(default=django.utils.timezone.now)),
                ('qr_code_token', models.CharField(blank=True, max_length=255, unique=True)),
                ('qr_code_image', models.ImageField(blank=True, upload_to='qr_codes/')),
                ('qr_code_active', models.BooleanField(default=True)),
                ('rocket_api_data', models.JSONField(blank=True, default=dict)),
                ('verification_status', models.CharField(default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='influencer_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='VenueProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('venue_name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('phone', models.CharField(max_length=20)),
                ('cuisine_type', models.CharField(blank=True, max_length=100)),
                ('average_bill', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('max_redemption_amount', models.DecimalField(decimal_places=2, default=500.0, max_digits=8)),
                ('is_active', models.BooleanField(default=True)),
                ('total_redemptions', models.IntegerField(default=0)),
                ('total_redeemed_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='venue_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Redemption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('qr_token_used', models.CharField(max_length=255)),
                ('balance_before', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance_after', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('receipt_image', models.ImageField(blank=True, upload_to='receipts/')),
                ('influencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='core.influencerprofile')),
                ('venue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='core.venueprofile')),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('signup', 'Sign Up'), ('redemption', 'Redemption'), ('qr_scan', 'QR Code Scan'), ('achievement', 'Achievement Earned'), ('tier_upgrade', 'Tier Upgrade'), ('balance_reset', 'Balance Reset'), ('admin_action', 'Admin Action')], max_length=30)),
                ('description', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('badge_type', models.CharField(choices=[('first_signup', 'First Sign-up'), ('first_redemption', 'First Redemption'), ('tier_upgrade', 'Tier Upgrade'), ('streak_7', '7-Day Streak'), ('streak_30', '30-Day Streak'), ('top_monthly', 'Top 10 Monthly'), ('big_spender', 'Big Spender'), ('venue_explorer', 'Venue Explorer'), ('social_star', 'Social Media Star')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('xp_reward', models.IntegerField(default=0)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('influencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='core.influencerprofile')),
            ],
            options={
                'unique_together': {('influencer', 'badge_type')},
            },
        ),
    ]
